name: üëÄ Check for new kagent version

on:
  push:
    branches:
      - main
  schedule:
    # every hour
    - cron: '0 * * * *'

jobs:
  update-formula:
    runs-on: ubuntu-latest
    permissions:
        contents: write
        pull-requests: write
        actions: write

    steps:
    - uses: actions/checkout@v5

    - name: Get current version
      id: version
      run: |
        echo "VERSION=$(curl -s "https://api.github.com/repos/kagent-dev/kagent/releases/latest" | jq -r .tag_name | sed 's/^v//')" >> $GITHUB_OUTPUT

    - name: Fetch release assets and SHAs
      id: fetch-assets
      run: |
        VERSION="${{ steps.version.outputs.VERSION }}"
        echo ":: Fetching release information for version $VERSION"
        RELEASE_INFO=$(curl -s "https://api.github.com/repos/kagent-dev/kagent/releases/tags/v${VERSION}")

        echo ":: Extracting SHA256 values from the digest field of each asset"
        DARWIN_ARM64_SHA=$(echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name == "kagent-darwin-arm64") | .digest | split(":")[1]')
        DARWIN_AMD64_SHA=$(echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name == "kagent-darwin-amd64") | .digest | split(":")[1]')
        LINUX_ARM64_SHA=$(echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name == "kagent-linux-arm64") | .digest | split(":")[1]')
        LINUX_AMD64_SHA=$(echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name == "kagent-linux-amd64") | .digest | split(":")[1]')

        echo ":: Setting outputs"
        echo "DARWIN_ARM64_SHA=$DARWIN_ARM64_SHA" >> $GITHUB_OUTPUT
        echo "DARWIN_AMD64_SHA=$DARWIN_AMD64_SHA" >> $GITHUB_OUTPUT
        echo "LINUX_ARM64_SHA=$LINUX_ARM64_SHA" >> $GITHUB_OUTPUT
        echo "LINUX_AMD64_SHA=$LINUX_AMD64_SHA" >> $GITHUB_OUTPUT

    - name: Update formula ${{ steps.version.outputs.VERSION }}
      run: |
        VERSION=${{ steps.version.outputs.VERSION }}
        DARWIN_ARM64_SHA=${{ steps.fetch-assets.outputs.DARWIN_ARM64_SHA }}
        DARWIN_AMD64_SHA=${{ steps.fetch-assets.outputs.DARWIN_AMD64_SHA }}
        LINUX_ARM64_SHA=${{ steps.fetch-assets.outputs.LINUX_ARM64_SHA }}
        LINUX_AMD64_SHA=${{ steps.fetch-assets.outputs.LINUX_AMD64_SHA }}

        echo "VERSION=${{ steps.version.outputs.VERSION }}"
        echo "DARWIN_ARM64_SHA=${{ steps.fetch-assets.outputs.DARWIN_ARM64_SHA }}"
        echo "DARWIN_AMD64_SHA=${{ steps.fetch-assets.outputs.DARWIN_AMD64_SHA }}"
        echo "LINUX_ARM64_SHA=${{ steps.fetch-assets.outputs.LINUX_ARM64_SHA }}"
        echo "LINUX_AMD64_SHA=${{ steps.fetch-assets.outputs.LINUX_AMD64_SHA }}"

        echo ":: Updating the formula file"
        sed -i "s/version \".*\"/version \"$VERSION\"/" Formula/kagent.rb
        sed -i '11s/sha256 ".*"/sha256 "'$DARWIN_ARM64_SHA'"/' Formula/kagent.rb
        sed -i '16s/sha256 ".*"/sha256 "'$DARWIN_AMD64_SHA'"/' Formula/kagent.rb
        sed -i '21s/sha256 ".*"/sha256 "'$LINUX_ARM64_SHA'"/' Formula/kagent.rb
        sed -i '26s/sha256 ".*"/sha256 "'$LINUX_AMD64_SHA'"/' Formula/kagent.rb

        echo ":: Updating README"
        sed -i "s/\*\*v.*\*\*/**v$VERSION**/" README.md

        echo ":: Looking for changes"
        git add Formula/kagent.rb README.md
        if ! git diff --staged --quiet; then
          echo "::notice title=üëå Noice::Formula updated to ${{ steps.version.outputs.VERSION }}"
          echo "got_update=true" >> $GITHUB_ENV
        else
          echo "::notice title=‚ôªÔ∏è Up to date::OK"
        fi

    - name: Commit changes directly to main
      if: env.got_update == 'true'
      env:
        PAGER: cat
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git config user.name "github-actions[bot]"
        git commit -m "Update kagent to ${{ steps.version.outputs.VERSION }}"
        git push

    - name: Tag release and notify
      if: env.got_update == 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git tag -a v${{ steps.version.outputs.VERSION }} -m "Version Update: ${{ steps.version.outputs.VERSION }}"
        git push origin --tags

        echo "::kicking release notifier"
        gh workflow run release-notifier.yml -F version=${{ steps.version.outputs.VERSION }}

    - name: Kick testing job
      if: env.got_update == 'true'
      run: |
        gh workflow run test.yml
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

